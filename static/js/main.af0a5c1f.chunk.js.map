{"version":3,"sources":["Quiz.js","App.js","index.js"],"names":["Quiz","props","answerElements","shuffledAnswers","map","answer","state","gameState","buttonStyles","backgroundColor","selectedAnswer","correctAnswer","opacity","border","react_default","a","createElement","key","nanoid","quenum","num","id","style","className","onClick","holdAnswer","question","App","_useState","useState","_useState2","Object","slicedToArray","setGameState","_useState3","amount","difficulty","type","categories","_useState4","settings","setSettings","_useState5","_useState6","questions","setQuestions","_useState7","_useState8","correctSum","setCorrectSum","questionNum","startGame","fetch","concat","then","res","json","data","results","result","decode","correct_answer","incorrectAnswers","incorrect_answers","toConsumableArray","value","sort","Math","random","b","_ref","setTimeout","newQuestions","objectSpread","resultElement","submitEl","sum","forEach","window","scrollTo","document","body","scrollHeight","submitQuiz","startEl","index_es","placeholder","options","label","onChange","prevSettings","updateType","updateDifficulty","updateAmount","quizEl","questionElements","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.af0a5c1f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\n\r\nexport default function Quiz(props) {\r\n  const answerElements = props.shuffledAnswers.map((answer) => {\r\n    let state = props.gameState\r\n    const buttonStyles = {\r\n      backgroundColor:\r\n        state === 1 && answer === props.selectedAnswer\r\n          ? \"#8b9ed4\"\r\n          : state === 2 && answer === props.correctAnswer\r\n          ? \"#4EB26C\"\r\n          : state === 2 && answer !== props.correctAnswer\r\n          ? \"#d15259\"\r\n          : \"white\",\r\n      opacity:\r\n        state === 1 ||\r\n        (state === 2 && answer === props.selectedAnswer && props.correctAnswer === answer)\r\n          ? \"1\"\r\n          : \"0.5\",\r\n      border: answer === props.selectedAnswer ? \"3px solid black\" : \"\"\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={nanoid()}\r\n        quenum={props.num}\r\n        id={props.id}\r\n        style={buttonStyles}\r\n        className=\"answer\"\r\n        onClick={() => props.holdAnswer(props.id, answer)}\r\n      >\r\n        {answer}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"question-div\">\r\n      <p className=\"question\">{props.question}</p>\r\n      <div className=\"answers-div\">{answerElements}</div>\r\n    </div>\r\n  )\r\n}\r\n","import \"./App.css\"\r\nimport Quiz from \"./Quiz.js\"\r\nimport React, { useState } from \"react\"\r\nimport { decode } from \"he\"\r\n\r\nimport { nanoid } from \"nanoid\"\r\n\r\nimport { Dropdown } from \"react-dropdown-now\"\r\nimport \"react-dropdown-now/style.css\"\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState(0)\r\n  const [settings, setSettings] = useState({\r\n    amount: 6,\r\n    difficulty: \"hard\",\r\n    type: \"\",\r\n    categories: \"\",\r\n  })\r\n  const [questions, setQuestions] = useState([])\r\n  const [correctSum, setCorrectSum] = useState(0)\r\n\r\n  let questionNum = 0\r\n\r\n  const startGame = () => {\r\n    fetch(\r\n      `https://opentdb.com/api.php?amount=${settings.amount}&difficulty=${settings.difficulty}&${settings.type}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        setQuestions(\r\n          data.results.map((result) => {\r\n            return {\r\n              id: nanoid(),\r\n              question: decode(result.question),\r\n              correctAnswer: decode(result.correct_answer),\r\n              shuffledAnswers: shuffleAnswers(\r\n                decode(result.correct_answer),\r\n                result.incorrect_answers\r\n              ),\r\n              selectedAnswer: \"\",\r\n            }\r\n          })\r\n        )\r\n      )\r\n    setTimeout(() => setGameState(1), 600)\r\n  }\r\n\r\n  function shuffleAnswers(correctAnswer, incorrectAnswers) {\r\n    const answers = [correctAnswer, ...incorrectAnswers]\r\n    let shuffledAnswers = answers\r\n      .map((value) => ({ value, sort: Math.random() }))\r\n      .sort((a, b) => a.sort - b.sort)\r\n      .map(({ value }) => value)\r\n    return shuffledAnswers\r\n  }\r\n\r\n  const holdAnswer = (id, answer) => {\r\n    if (gameState === 2) {\r\n      return\r\n    } else {\r\n      const newQuestions = questions.map((question) => {\r\n        return question.id === id && question.selectedAnswer === \"\"\r\n          ? { ...question, selectedAnswer: answer }\r\n          : question.id === id && question.selectedAnswer === answer\r\n          ? { ...question, selectedAnswer: \"\" }\r\n          : question.id === id && answer !== question.selectedAnswer\r\n          ? { ...question, selectedAnswer: answer }\r\n          : { ...question }\r\n      })\r\n      setQuestions(newQuestions)\r\n    }\r\n  }\r\n\r\n  function goHome() {\r\n    setGameState(0)\r\n  }\r\n\r\n  function updateType(value) {\r\n    setSettings((prevSettings) => {\r\n      return {\r\n        ...prevSettings,\r\n        type: value.value,\r\n      }\r\n    })\r\n  }\r\n  function updateAmount(value) {\r\n    setSettings((prevSettings) => {\r\n      return {\r\n        ...prevSettings,\r\n        amount: value.value,\r\n      }\r\n    })\r\n  }\r\n\r\n  function updateDifficulty(value) {\r\n    setSettings((prevSettings) => {\r\n      return {\r\n        ...prevSettings,\r\n        difficulty: value.value,\r\n      }\r\n    })\r\n  }\r\n\r\n  function submitQuiz() {\r\n    let sum = 0\r\n    questions.forEach((question) => {\r\n      return question.correctAnswer === question.selectedAnswer ? sum++ : sum\r\n    })\r\n    setCorrectSum(sum)\r\n    setGameState(2)\r\n    window.scrollTo(0, document.body.scrollHeight)\r\n  }\r\n\r\n  const typeOptions = [\r\n    { value: \"\", label: \"All question types\" },\r\n    { value: \"type=multiple\", label: \"Multiple choice\" },\r\n    { value: \"type=boolean\", label: \"True or False\" },\r\n  ]\r\n  const amountOptions = [\r\n    { value: \"2\", label: \"2 questions\" },\r\n    { value: \"4\", label: \"4 questions\" },\r\n    { value: \"6\", label: \"6 questions\" },\r\n    { value: \"8\", label: \"8 questions\" },\r\n    { value: \"10\", label: \"10 questions\" },\r\n  ]\r\n\r\n  const difficultyOptions = [\r\n    { value: \"easy\", label: \"Easy difficulty\" },\r\n    { value: \"medium\", label: \"Medium difficulty\" },\r\n    { value: \"hard\", label: \"Hard difficulty\" },\r\n  ]\r\n\r\n  const resultElement = <h3 className=\"result-el\">{correctSum} correct answers!</h3>\r\n\r\n  const submitEl =\r\n    gameState === 1 ? (\r\n      <button className=\"submitBtn\" onClick={() => submitQuiz()}>\r\n        Submit quiz\r\n      </button>\r\n    ) : (\r\n      <button className=\"submitBtn newGame\" onClick={() => startGame()}>\r\n        Play again\r\n      </button>\r\n    )\r\n\r\n    const startEl = (\r\n      <div className=\"start-container\">\r\n        <h1 className=\"start-title\">QUIZZICAL</h1>\r\n        <div className=\"settings-el\">\r\n          <Dropdown\r\n            className=\"dropdown\"\r\n            placeholder=\"Select an option\"\r\n            options={typeOptions}\r\n            value=\"\"\r\n            onChange={(value) => updateType(value)}\r\n          />\r\n\r\n          <Dropdown\r\n            className=\"dropdown\"\r\n            placeholder=\"Difficulty\"\r\n            options={difficultyOptions}\r\n            value=\"easy\"\r\n            onChange={(value) => updateDifficulty(value)}\r\n          />\r\n          <Dropdown\r\n            className=\"dropdown\"\r\n            placeholder=\"Number of questions\"\r\n            options={amountOptions}\r\n            value=\"6\"\r\n            onChange={(value) => updateAmount(value)}\r\n          />\r\n\r\n          <button className=\"startBtn\" onClick={() => startGame()}>\r\n            Start game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n    const quizEl = (\r\n      <div className=\"quiz-container\">\r\n        <h2>QUIZ</h2>\r\n        {questionElements}\r\n        {gameState === 2 && resultElement}\r\n        <div className=\"after-div\">\r\n          {submitEl}\r\n          {gameState === 2 && (\r\n            <button className=\"submitBtn home\" onClick={() => goHome()}>\r\n              Home\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n  const questionElements = questions.map((question) => {\r\n    return (\r\n      <Quiz\r\n        key={question.id}\r\n        id={question.id}\r\n        gameState={gameState}\r\n        num={(questionNum += 1)}\r\n        question={question.question}\r\n        correctAnswer={question.correctAnswer}\r\n        shuffledAnswers={question.shuffledAnswers}\r\n        selectedAnswer={question.selectedAnswer}\r\n        holdAnswer={holdAnswer}\r\n      />\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"blob-left\"></div>\r\n      <div className=\"blob-right\"></div>\r\n      {gameState === 0 && startEl}\r\n      {gameState >= 1 && quizEl}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}