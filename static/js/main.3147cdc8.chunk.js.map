{"version":3,"sources":["Quiz.js","App.js","index.js"],"names":["Quiz","props","answerElements","shuffledAnswers","map","answer","state","gameState","buttonStyles","backgroundColor","selectedAnswer","correctAnswer","opacity","border","react_default","a","createElement","key","nanoid","quenum","num","id","style","className","onClick","holdAnswer","question","App","_useState","useState","_useState2","Object","slicedToArray","setGameState","_useState3","amount","difficulty","type","categories","_useState4","settings","setSettings","_useState5","_useState6","questions","setQuestions","_useState7","_useState8","correctSum","setCorrectSum","questionNum","startGame","fetch","concat","then","res","json","data","results","result","decode","correct_answer","incorrectAnswers","incorrect_answers","toConsumableArray","value","sort","Math","random","b","_ref","setTimeout","newQuestions","objectSpread","resultElement","submitEl","sum","forEach","window","scrollTo","document","body","scrollHeight","submitQuiz","quizElements","index_es","placeholder","options","label","onChange","prevSettings","updateType","updateDifficulty","updateAmount","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"8PAGe,SAASA,EAAKC,GAC3B,IAAMC,EAAiBD,EAAME,gBAAgBC,IAAI,SAACC,GAChD,IAAIC,EAAQL,EAAMM,UACZC,EAAe,CACnBC,gBACY,IAAVH,GAAeD,IAAWJ,EAAMS,eAC5B,UACU,IAAVJ,GAAeD,IAAWJ,EAAMU,cAChC,UACU,IAAVL,GAAeD,IAAWJ,EAAMU,cAChC,UACA,QACNC,QACY,IAAVN,GACW,IAAVA,GAAeD,IAAWJ,EAAMS,gBAAkBT,EAAMU,gBAAkBN,EACvE,IACA,MACNQ,OAAQR,IAAWJ,EAAMS,eAAiB,kBAAoB,IAGhE,OACEI,EAAAC,EAAAC,cAAA,UACEC,IAAKC,cACLC,OAAQlB,EAAMmB,IACdC,GAAIpB,EAAMoB,GACVC,MAAOd,EACPe,UAAU,SACVC,QAAS,kBAAMvB,EAAMwB,WAAWxB,EAAMoB,GAAIhB,KAEzCA,KAKP,OACES,EAAAC,EAAAC,cAAA,OAAKO,UAAU,gBACbT,EAAAC,EAAAC,cAAA,KAAGO,UAAU,YAAYtB,EAAMyB,UAC/BZ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eAAerB,4BCiLrByB,MA/Mf,WAAe,IAAAC,EACqBC,mBAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNrB,EADMuB,EAAA,GACKG,EADLH,EAAA,GAAAI,EAEmBL,mBAAS,CACvCM,OAAQ,EACRC,WAAY,OACZC,KAAM,GACNC,WAAY,KANDC,EAAAR,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAENM,EAFMD,EAAA,GAEIE,EAFJF,EAAA,GAAAG,EAQqBb,mBAAS,IAR9Bc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAQNE,EARMD,EAAA,GAQKE,EARLF,EAAA,GAAAG,EASuBjB,mBAAS,GAThCkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GASNE,EATMD,EAAA,GASME,EATNF,EAAA,GAWTG,EAAc,EAEZC,EAAY,WAChBC,MAAK,sCAAAC,OACmCb,EAASL,OAD5C,gBAAAkB,OACiEb,EAASJ,WAD1E,KAAAiB,OACwFb,EAASH,OAEnGiB,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAACG,GAAD,OACJZ,EACEY,EAAKC,QAAQtD,IAAI,SAACuD,GAChB,MAAO,CACLtC,GAAIH,cACJQ,SAAUkC,iBAAOD,EAAOjC,UACxBf,cAAeiD,iBAAOD,EAAOE,gBAC7B1D,iBAYYQ,EAXViD,iBAAOD,EAAOE,gBAWWC,EAVzBH,EAAOI,kBAWN,CAAIpD,GAAJ0C,OAAAtB,OAAAiC,EAAA,EAAAjC,CAAsB+B,IAEhC1D,IAAI,SAAC6D,GAAD,MAAY,CAAEA,QAAOC,KAAMC,KAAKC,YACpCF,KAAK,SAACnD,EAAGsD,GAAJ,OAAUtD,EAAEmD,KAAOG,EAAEH,OAC1B9D,IAAI,SAAAkE,GAAA,OAAAA,EAAGL,SAbAvD,eAAgB,IAQ5B,IAAwBC,EAAemD,OAHrCS,WAAW,kBAAMtC,EAAa,IAAI,MAYpC,IAAMR,EAAa,SAACJ,EAAIhB,GACtB,GAAkB,IAAdE,EAAJ,CAGE,IAAMiE,EAAe5B,EAAUxC,IAAI,SAACsB,GAClC,OAAOA,EAASL,KAAOA,GAAkC,KAA5BK,EAAShB,eAA/BqB,OAAA0C,EAAA,EAAA1C,CAAA,GACEL,EADF,CACYhB,eAAgBL,IAC/BqB,EAASL,KAAOA,GAAMK,EAAShB,iBAAmBL,EAAlD0B,OAAA0C,EAAA,EAAA1C,CAAA,GACKL,EADL,CACehB,eAAgB,KAC/BgB,EAASL,KAAOA,GAAMhB,IAAWqB,EAAShB,eAA1CqB,OAAA0C,EAAA,EAAA1C,CAAA,GACKL,EADL,CACehB,eAAgBL,IAD/B0B,OAAA0C,EAAA,EAAA1C,CAAA,GAEKL,KAEXmB,EAAa2B,KA+DXE,EAAgB5D,EAAAC,EAAAC,cAAA,MAAIO,UAAU,aAAayB,EAA3B,qBAEhB2B,EACU,IAAdpE,EACEO,EAAAC,EAAAC,cAAA,UAAQO,UAAU,YAAYC,QAAS,kBAjC3C,WACE,IAAIoD,EAAM,EACVhC,EAAUiC,QAAQ,SAACnD,GACjB,OAAOA,EAASf,gBAAkBe,EAAShB,eAAiBkE,IAAQA,IAEtE3B,EAAc2B,GACd3C,EAAa,GACb6C,OAAOC,SAAS,EAAGC,SAASC,KAAKC,cA0BcC,KAA7C,eAIArE,EAAAC,EAAAC,cAAA,UAAQO,UAAU,oBAAoBC,QAAS,kBAAM2B,MAArD,cAKEiC,EAAexC,EAAUxC,IAAI,SAACsB,GAClC,OACEZ,EAAAC,EAAAC,cAAChB,EAAD,CACEiB,IAAKS,EAASL,GACdA,GAAIK,EAASL,GACbd,UAAWA,EACXa,IAAM8B,GAAe,EACrBxB,SAAUA,EAASA,SACnBf,cAAee,EAASf,cACxBR,gBAAiBuB,EAASvB,gBAC1BO,eAAgBgB,EAAShB,eACzBe,WAAYA,MAKlB,OACEX,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACfT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eACA,IAAdhB,GACCO,EAAAC,EAAAC,cAAA,OAAKO,UAAU,mBACbT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,eAAd,gBACAT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eACbT,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CACE9D,UAAU,WACV+D,YAAY,mBACZC,QA3DQ,CAClB,CAAEtB,MAAO,GAAIuB,MAAO,sBACpB,CAAEvB,MAAO,gBAAiBuB,MAAO,mBACjC,CAAEvB,MAAO,eAAgBuB,MAAO,kBAyDtBvB,MAAM,GACNwB,SAAU,SAACxB,GAAD,OAjGtB,SAAoBA,GAClBxB,EAAY,SAACiD,GACX,OAAO3D,OAAA0C,EAAA,EAAA1C,CAAA,GACF2D,EADL,CAEErD,KAAM4B,EAAMA,UA6Fe0B,CAAW1B,MAGlCnD,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CACE9D,UAAU,WACV+D,YAAY,aACZC,QAtDc,CACxB,CAAEtB,MAAO,OAAQuB,MAAO,mBACxB,CAAEvB,MAAO,SAAUuB,MAAO,qBAC1B,CAAEvB,MAAO,OAAQuB,MAAO,oBAoDdvB,MAAM,OACNwB,SAAU,SAACxB,GAAD,OAxFtB,SAA0BA,GACxBxB,EAAY,SAACiD,GACX,OAAO3D,OAAA0C,EAAA,EAAA1C,CAAA,GACF2D,EADL,CAEEtD,WAAY6B,EAAMA,UAoFS2B,CAAiB3B,MAExCnD,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CACE9D,UAAU,WACV+D,YAAY,sBACZC,QArEU,CACpB,CAAEtB,MAAO,IAAKuB,MAAO,eACrB,CAAEvB,MAAO,IAAKuB,MAAO,eACrB,CAAEvB,MAAO,IAAKuB,MAAO,eACrB,CAAEvB,MAAO,IAAKuB,MAAO,eACrB,CAAEvB,MAAO,KAAMuB,MAAO,iBAiEZvB,MAAM,IACNwB,SAAU,SAACxB,GAAD,OAxGtB,SAAsBA,GACpBxB,EAAY,SAACiD,GACX,OAAO3D,OAAA0C,EAAA,EAAA1C,CAAA,GACF2D,EADL,CAEEvD,OAAQ8B,EAAMA,UAoGa4B,CAAa5B,MAGpCnD,EAAAC,EAAAC,cAAA,UAAQO,UAAU,WAAWC,QAAS,kBAAM2B,MAA5C,gBAML5C,GAAa,GACZO,EAAAC,EAAAC,cAAA,OAAKO,UAAU,kBACbT,EAAAC,EAAAC,cAAA,kBACCoE,EACc,IAAd7E,GAAmBmE,EACpB5D,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACZoD,EACc,IAAdpE,GACCO,EAAAC,EAAAC,cAAA,UAAQO,UAAU,iBAAiBC,QAAS,WApItDS,EAAa,KAoIH,YCzMD6D,IAASC,WAAWf,SAASgB,eAAe,SACpDC,OACHnF,EAAAC,EAAAC,cAACF,EAAAC,EAAMmF,WAAP,KACEpF,EAAAC,EAAAC,cAACmF,EAAD","file":"static/js/main.3147cdc8.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\n\r\nexport default function Quiz(props) {\r\n  const answerElements = props.shuffledAnswers.map((answer) => {\r\n    let state = props.gameState\r\n    const buttonStyles = {\r\n      backgroundColor:\r\n        state === 1 && answer === props.selectedAnswer\r\n          ? \"#8b9ed4\"\r\n          : state === 2 && answer === props.correctAnswer\r\n          ? \"#4EB26C\"\r\n          : state === 2 && answer !== props.correctAnswer\r\n          ? \"#d15259\"\r\n          : \"white\",\r\n      opacity:\r\n        state === 1 ||\r\n        (state === 2 && answer === props.selectedAnswer && props.correctAnswer === answer)\r\n          ? \"1\"\r\n          : \"0.5\",\r\n      border: answer === props.selectedAnswer ? \"3px solid black\" : \"\"\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={nanoid()}\r\n        quenum={props.num}\r\n        id={props.id}\r\n        style={buttonStyles}\r\n        className=\"answer\"\r\n        onClick={() => props.holdAnswer(props.id, answer)}\r\n      >\r\n        {answer}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"question-div\">\r\n      <p className=\"question\">{props.question}</p>\r\n      <div className=\"answers-div\">{answerElements}</div>\r\n    </div>\r\n  )\r\n}\r\n","import \"./App.css\"\nimport Quiz from \"./Quiz.js\"\nimport React, { useState } from \"react\"\nimport { decode } from \"he\"\n\nimport { nanoid } from \"nanoid\"\n\nimport { Dropdown } from \"react-dropdown-now\"\nimport \"react-dropdown-now/style.css\"\n\nfunction App() {\n  const [gameState, setGameState] = useState(0)\n  const [settings, setSettings] = useState({\n    amount: 6,\n    difficulty: \"easy\",\n    type: \"\",\n    categories: \"\",\n  })\n  const [questions, setQuestions] = useState([])\n  const [correctSum, setCorrectSum] = useState(0)\n\n  let questionNum = 0\n\n  const startGame = () => {\n    fetch(\n      `https://opentdb.com/api.php?amount=${settings.amount}&difficulty=${settings.difficulty}&${settings.type}`\n    )\n      .then((res) => res.json())\n      .then((data) =>\n        setQuestions(\n          data.results.map((result) => {\n            return {\n              id: nanoid(),\n              question: decode(result.question),\n              correctAnswer: decode(result.correct_answer),\n              shuffledAnswers: shuffleAnswers(\n                decode(result.correct_answer),\n                result.incorrect_answers\n              ),\n              selectedAnswer: \"\",\n            }\n          })\n        )\n      )\n    setTimeout(() => setGameState(1), 600)\n  }\n\n  function shuffleAnswers(correctAnswer, incorrectAnswers) {\n    const answers = [correctAnswer, ...incorrectAnswers]\n    let shuffledAnswers = answers\n      .map((value) => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value)\n    return shuffledAnswers\n  }\n\n  const holdAnswer = (id, answer) => {\n    if (gameState === 2) {\n      return\n    } else {\n      const newQuestions = questions.map((question) => {\n        return question.id === id && question.selectedAnswer === \"\"\n          ? { ...question, selectedAnswer: answer }\n          : question.id === id && question.selectedAnswer === answer\n          ? { ...question, selectedAnswer: \"\" }\n          : question.id === id && answer !== question.selectedAnswer\n          ? { ...question, selectedAnswer: answer }\n          : { ...question }\n      })\n      setQuestions(newQuestions)\n    }\n  }\n\n  function goHome() {\n    setGameState(0)\n  }\n\n  function updateType(value) {\n    setSettings((prevSettings) => {\n      return {\n        ...prevSettings,\n        type: value.value,\n      }\n    })\n  }\n  function updateAmount(value) {\n    setSettings((prevSettings) => {\n      return {\n        ...prevSettings,\n        amount: value.value,\n      }\n    })\n  }\n\n  function updateDifficulty(value) {\n    setSettings((prevSettings) => {\n      return {\n        ...prevSettings,\n        difficulty: value.value,\n      }\n    })\n  }\n\n  function submitQuiz() {\n    let sum = 0\n    questions.forEach((question) => {\n      return question.correctAnswer === question.selectedAnswer ? sum++ : sum\n    })\n    setCorrectSum(sum)\n    setGameState(2)\n    window.scrollTo(0, document.body.scrollHeight)\n  }\n\n  const typeOptions = [\n    { value: \"\", label: \"All question types\" },\n    { value: \"type=multiple\", label: \"Multiple choice\" },\n    { value: \"type=boolean\", label: \"True or False\" },\n  ]\n  const amountOptions = [\n    { value: \"2\", label: \"2 questions\" },\n    { value: \"4\", label: \"4 questions\" },\n    { value: \"6\", label: \"6 questions\" },\n    { value: \"8\", label: \"8 questions\" },\n    { value: \"10\", label: \"10 questions\" },\n  ]\n\n  const difficultyOptions = [\n    { value: \"easy\", label: \"Easy difficulty\" },\n    { value: \"medium\", label: \"Medium difficulty\" },\n    { value: \"hard\", label: \"Hard difficulty\" },\n  ]\n\n  const resultElement = <h3 className=\"result-el\">{correctSum} correct answers!</h3>\n\n  const submitEl =\n    gameState === 1 ? (\n      <button className=\"submitBtn\" onClick={() => submitQuiz()}>\n        Submit quiz\n      </button>\n    ) : (\n      <button className=\"submitBtn newGame\" onClick={() => startGame()}>\n        Play again\n      </button>\n    )\n\n  const quizElements = questions.map((question) => {\n    return (\n      <Quiz\n        key={question.id}\n        id={question.id}\n        gameState={gameState}\n        num={(questionNum += 1)}\n        question={question.question}\n        correctAnswer={question.correctAnswer}\n        shuffledAnswers={question.shuffledAnswers}\n        selectedAnswer={question.selectedAnswer}\n        holdAnswer={holdAnswer}\n      />\n    )\n  })\n\n  return (\n    <div className=\"container\">\n      <div className=\"blob-left\"></div>\n      <div className=\"blob-right\"></div>\n      {gameState === 0 && (\n        <div className=\"start-container\">\n          <h1 className=\"start-title\">VEM VET MEST</h1>\n          <div className=\"settings-el\">\n            <Dropdown\n              className=\"dropdown\"\n              placeholder=\"Select an option\"\n              options={typeOptions}\n              value=\"\"\n              onChange={(value) => updateType(value)}\n            />\n\n            <Dropdown\n              className=\"dropdown\"\n              placeholder=\"Difficulty\"\n              options={difficultyOptions}\n              value=\"easy\"\n              onChange={(value) => updateDifficulty(value)}\n            />\n            <Dropdown\n              className=\"dropdown\"\n              placeholder=\"Number of questions\"\n              options={amountOptions}\n              value=\"6\"\n              onChange={(value) => updateAmount(value)}\n            />\n\n            <button className=\"startBtn\" onClick={() => startGame()}>\n              Start game\n            </button>\n          </div>\n        </div>\n      )}\n      {gameState >= 1 && (\n        <div className=\"quiz-container\">\n          <h2>QUIZ</h2>\n          {quizElements}\n          {gameState === 2 && resultElement}\n          <div className=\"after-div\">\n            {submitEl}\n            {gameState === 2 && (\n              <button className=\"submitBtn home\" onClick={() => goHome()}>\n                Home\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}